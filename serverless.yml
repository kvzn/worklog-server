org: kevinzheng
app: worklog
service: worklog

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-southeast-1
  environment:
    DYNAMODB_TABLE_USERS: ${self:service}-${opt:stage, self:provider.stage}-users
    DYNAMODB_TABLE_WORKLOGS: ${self:service}-${opt:stage, self:provider.stage}-worklogs
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  health:
    handler: src/functions/health.health
    events:
      - http:
          path: health
          method: get
          cors: true

  login:
    handler: src/functions/auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(src/json-schemas/login.json)}

  accountUpdatePasssword:
    handler: src/functions/account/updatePassword.handler
    events:
      - http:
          path: account/password
          method: put
          cors: true
          request:
            schema:
              application/json: ${file(src/json-schemas/account-update-password.json)}

  worklogCreate:
    handler: src/functions/worklog/create.handler
    events:
      - http:
          path: worklogs
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(src/json-schemas/worklog-create-update.json)}

  worklogList:
    handler: src/functions/worklog/list.handler
    events:
      - http:
          path: worklogs
          method: get
          cors: true

  worklogGet:
    handler: src/functions/worklog/get.handler
    events:
      - http:
          path: worklogs/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  worklogUpdate:
    handler: src/functions/worklog/update.handler
    events:
      - http:
          path: worklogs/{id}
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true
            schema:
              application/json: ${file(src/json-schemas/worklog-create-update.json)}

  worklogDelete:
    handler: src/functions/worklog/delete.handler
    events:
      - http:
          path: worklogs/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true

  worklogIsTodayWritten:
    handler: src/functions/worklog/isTodayWritten.handler
    events:
      - http:
          path: worklogs/isTodayWritten
          method: get
          cors: true

  adminUserCreate:
    handler: src/functions/admin/user/create.handler
    events:
      - http:
          path: admin/users
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(src/json-schemas/user-create.json)}

  adminUserList:
    handler: src/functions/admin/user/list.handler
    events:
      - http:
          path: admin/users
          method: get
          cors: true

  adminUserDelete:
    handler: src/functions/admin/user/delete.handler
    events:
      - http:
          path: admin/users/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true

  adminUserLock:
    handler: src/functions/admin/user/lock.handler
    events:
      - http:
          path: admin/users/{id}/lock
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true

  adminWorklogList:
    handler: src/functions/admin/worklog/list.handler
    events:
      - http:
          path: admin/worklogs
          method: get
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources: # CloudFormation template syntax from here on.
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DYNAMODB_TABLE_USERS}
        GlobalSecondaryIndexes:
          - IndexName: IdIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: "5"
              WriteCapacityUnits: "5"
    WorklogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: creatorId
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: creatorId
            KeyType: HASH
          - AttributeName: date
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DYNAMODB_TABLE_WORKLOGS}
        GlobalSecondaryIndexes:
          - IndexName: IdIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: "5"
              WriteCapacityUnits: "5"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-domain-manager

custom:
  # init seed data online: sls dynamodb seed --seed=users --online --region ap-southeast-1
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 6000
      inMemory: true
      region: ${self:provider.region}
      seed: true
    seed:
      users:
        sources:
          - table: ${self:provider.environment.DYNAMODB_TABLE_USERS}
            sources: [./src/seeds/users.json]
  customDomain:
    domainName: worklog.springupbackend.com
    # certificateName: '*.springupbackend.com'
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: "regional"
    # hostedZoneId: ${self:provider.region}  # can not use this with endpointType? Why?
